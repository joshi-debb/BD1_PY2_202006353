-- Descripcion: Script para el proyecto 2

-- CREAR BASE DE DATOS

CREATE SCHEMA IF NOT EXISTS BD1PY2;

-- SELECCIONAR BASE DE DATOS

USE BD1PY2;

-- CREAR TABLA CARRERA

CREATE TABLE IF NOT EXISTS BD1PY2.CARRERA (
    id_carrera INT NOT NULL AUTO_INCREMENT,
    nombre VARCHAR(30) NOT NULL,
    
    PRIMARY KEY (id_carrera)

);

-- CREAR TABLA ESTUDIANTE

CREATE TABLE IF NOT EXISTS BD1PY2.ESTUDIANTE (
    carnet VARCHAR(10) NOT NULL,
    dpi VARCHAR(20) NOT NULL,
    nombre VARCHAR(30) NOT NULL,
    apellido VARCHAR(30) NOT NULL,
    fecha_nac DATE NOT NULL,
    correo VARCHAR(100) NOT NULL,
    telefono VARCHAR(8) NOT NULL,
    direccion VARCHAR(100) NOT NULL,
    creditos INT NOT NULL,
    fecha DATE NOT NULL,
    id_carrera INT NOT NULL,
    
    PRIMARY KEY (carnet),
    FOREIGN KEY (id_carrera) REFERENCES BD1PY2.CARRERA(id_carrera)

);

-- CREAR TABLA DOCENTE

CREATE TABLE IF NOT EXISTS BD1PY2.DOCENTE (
    siif VARCHAR(10) NOT NULL,
    dpi VARCHAR(20) NOT NULL,
    nombre VARCHAR(30) NOT NULL,
    apellido VARCHAR(30) NOT NULL,
    fecha_nac DATE NOT NULL,
    correo VARCHAR(100) NOT NULL,
    telefono VARCHAR(8) NOT NULL,
    direccion VARCHAR(100) NOT NULL,
    fecha DATE NOT NULL,
    
    PRIMARY KEY (siif)

);

-- CREAR TABLA CURSO

CREATE TABLE IF NOT EXISTS BD1PY2.CURSO (
    cod_curso VARCHAR(10) NOT NULL,
    nombre VARCHAR(30) NOT NULL,
    creditos_nec INT NOT NULL,
    creditos_otg INT NOT NULL,
    obligatorio BOOLEAN NOT NULL,
    id_carrera INT NOT NULL,
    
    PRIMARY KEY (cod_curso),
    FOREIGN KEY (id_carrera) REFERENCES BD1PY2.CARRERA(id_carrera)

);

-- CREAR TABLA CURSO_HABILITADO

CREATE TABLE IF NOT EXISTS BD1PY2.CURSO_HABILITADO (
    id_ch VARCHAR(10) NOT NULL,
    cupo_max INT NOT NULL,
    seccion VARCHAR(2) NOT NULL,
    anio DATE NOT NULL,
    cod_curso VARCHAR(10) NOT NULL,
    siif VARCHAR(10) NOT NULL,
    
    PRIMARY KEY (id_ch),
    FOREIGN KEY (cod_curso) REFERENCES BD1PY2.CURSO(cod_curso),
    FOREIGN KEY (siif) REFERENCES BD1PY2.DOCENTE(siif)

);


-- CREAR TABLA HORARIO

CREATE TABLE IF NOT EXISTS BD1PY2.HORARIO (
    id_horaio INT NOT NULL AUTO_INCREMENT,
    dia VARCHAR(10) NOT NULL,
    hora TIME NOT NULL,
    id_ch VARCHAR(10) NOT NULL,
    
    PRIMARY KEY (id_horaio),
    FOREIGN KEY (id_ch) REFERENCES BD1PY2.CURSO_HABILITADO(id_ch)

);

-- CREAR TABLA ASIGNACION

CREATE TABLE IF NOT EXISTS BD1PY2.ASIGNACION (
    id_asignacion INT NOT NULL AUTO_INCREMENT,
    carnet VARCHAR(10) NOT NULL,
    id_ch VARCHAR(10) NOT NULL,

    PRIMARY KEY (id_asignacion),
    FOREIGN KEY (carnet) REFERENCES BD1PY2.ESTUDIANTE(carnet),
    FOREIGN KEY (id_ch) REFERENCES BD1PY2.CURSO_HABILITADO(id_ch)

);

-- CREAR TABLA DESASIGNACION

CREATE TABLE IF NOT EXISTS BD1PY2.DESASIGNACION (
    id_desasignacion INT NOT NULL AUTO_INCREMENT,
    carnet VARCHAR(10) NOT NULL,
    id_ch VARCHAR(10) NOT NULL,

    PRIMARY KEY (id_desasignacion),
    FOREIGN KEY (carnet) REFERENCES BD1PY2.ESTUDIANTE(carnet),
    FOREIGN KEY (id_ch) REFERENCES BD1PY2.CURSO_HABILITADO(id_ch)

);

-- CREAR TABLA ASIGNADOS

CREATE TABLE IF NOT EXISTS BD1PY2.ASIGNADOS (
    id_asignados INT NOT NULL AUTO_INCREMENT,
    cantidad INT NOT NULL,
    id_ch VARCHAR(10) NOT NULL,

    PRIMARY KEY (id_asignados),
    FOREIGN KEY (id_ch) REFERENCES BD1PY2.CURSO_HABILITADO(id_ch)

);



-- CREAR TABLA NOTA

CREATE TABLE IF NOT EXISTS BD1PY2.NOTA (
    id_nota INT NOT NULL AUTO_INCREMENT,
    nota INT NOT NULL,
    carnet VARCHAR(10) NOT NULL,
    id_ch VARCHAR(10) NOT NULL,

    PRIMARY KEY (id_nota),
    FOREIGN KEY (carnet) REFERENCES BD1PY2.ESTUDIANTE(carnet),
    FOREIGN KEY (id_ch) REFERENCES BD1PY2.CURSO_HABILITADO(id_ch)

);

-- CREAR TABLA ACTA

CREATE TABLE IF NOT EXISTS BD1PY2.ACTA (
    id_acta INT NOT NULL AUTO_INCREMENT,
    fecha DATE NOT NULL,
    hora TIME NOT NULL,
    id_ch VARCHAR(10) NOT NULL,

    PRIMARY KEY (id_acta),
    FOREIGN KEY (id_ch) REFERENCES BD1PY2.CURSO_HABILITADO(id_ch)

);

-- CREAR TABLA HISTORIAL

CREATE TABLE IF NOT EXISTS BD1PY2.HISTORIAL (
    id_historial INT NOT NULL AUTO_INCREMENT,
    fecha DATE NOT NULL,
    descripcion VARCHAR(100) NOT NULL,
    tipo VARCHAR(20) NOT NULL,

    PRIMARY KEY (id_historial)

);


-- Funciones y Procedimientos:

-- procedimiento para lanzar mensaje de error

DROP PROCEDURE IF EXISTS msgE;

DELIMITER $$
CREATE PROCEDURE msgE(
    IN msm VARCHAR(200)
)
BEGIN
    SELECT msm as Error;
END$$
DELIMITER ;


-- procedimiento para lanzar mensaje

DROP PROCEDURE IF EXISTS msg;

DELIMITER $$
CREATE PROCEDURE msg(
    IN msm VARCHAR(200)
)
BEGIN
    SELECT msm as Response;
END$$
DELIMITER ;

-- procedimiento para crear carrera

DROP PROCEDURE IF EXISTS crearCarrera;

DELIMITER $$
CREATE PROCEDURE crearCarrera(
    IN nombre VARCHAR(30)
)
BEGIN
    -- Verifica si el nombre solo contiene letras
    IF nombre REGEXP '^[a-zA-Z ]+$' THEN
        INSERT INTO BD1PY2.CARRERA(nombre) VALUES(nombre); 
        
        call msg('Carrera creada exitosamente.');

    ELSE
        call msgE('El nombre debe contener solo letras.');
    END IF;
END$$
DELIMITER ;

-- procedimiento para registrar estudiante registrarEstudiante(202000001,'Estudiante de','Sistemas Uno','30-10-1999','sistemasuno@gmail.com',12345678,'direccion estudiantes sistemas 1',337859510101,3);

DROP PROCEDURE IF EXISTS registrarEstudiante;

DELIMITER $$
CREATE PROCEDURE registrarEstudiante(
    IN carnet VARCHAR(10),
    IN nombre VARCHAR(30),
    IN apellido VARCHAR(30),
    IN fecha_nac VARCHAR(30),
    IN correo VARCHAR(100),
    IN telefono VARCHAR(8),
    IN direccion VARCHAR(100),
    IN dpi VARCHAR(20),
    IN id_carrera VARCHAR(5)
)
proc_estudiante: BEGIN

    DECLARE fecha DATE;
    SET fecha = CURDATE();

    SET fecha_nac = STR_TO_DATE(fecha_nac, '%d-%m-%Y');

    IF carnet IS NULL THEN
        call msgE('El carnet no puede ser nulo.');
        LEAVE proc_estudiante;
    ELSEIF nombre IS NULL THEN
        call msgE('El nombre no puede ser nulo.');
        LEAVE proc_estudiante;
    ELSEIF apellido IS NULL THEN
        call msgE('El apellido no puede ser nulo.');
        LEAVE proc_estudiante;
    ELSEIF fecha_nac IS NULL THEN
        call msgE('La fecha de nacimiento no puede ser nula.');
        LEAVE proc_estudiante;
    ELSEIF correo IS NULL THEN
        call msgE('El correo no puede ser nulo.');
        LEAVE proc_estudiante;
    ELSEIF telefono IS NULL THEN
        call msgE('El telefono no puede ser nulo.');
        LEAVE proc_estudiante;
    ELSEIF direccion IS NULL THEN
        call msgE('La direccion no puede ser nula.');
        LEAVE proc_estudiante;
    ELSEIF dpi IS NULL THEN
        call msgE('El dpi no puede ser nulo.');
        LEAVE proc_estudiante;
    ELSEIF id_carrera IS NULL THEN
        call msgE('El id de carrera no puede ser nulo.');
        LEAVE proc_estudiante;
    END IF;

    IF correo REGEXP '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' THEN

        INSERT INTO BD1PY2.ESTUDIANTE(carnet, dpi, nombre, apellido, fecha_nac, correo, telefono, direccion, creditos, fecha, id_carrera) VALUES(carnet, dpi, nombre, apellido, fecha_nac, correo, telefono, direccion, creditos, fecha, id_carrera);

        call msg('Estudiante registrado exitosamente.');

    ELSE
        call msgE('El correo no es valido.');
    END IF;
END$$

DELIMITER ;


-- procedimiento para registrar docente

DROP PROCEDURE IF EXISTS registrarDocente;

DELIMITER $$
CREATE PROCEDURE registrarDocente(
    IN nombre VARCHAR(30),
    IN apellido VARCHAR(30),
    IN fecha_nac VARCHAR(30),
    IN correo VARCHAR(100),
    IN telefono VARCHAR(8),
    IN direccion VARCHAR(100),
    IN dpi VARCHAR(20),
    IN siif VARCHAR(10),
)
proc_docente: BEGIN

    DECLARE fecha DATE;
    SET fecha = CURDATE();

    SET fecha_nac = STR_TO_DATE(fecha_nac, '%d-%m-%Y');

    IF siif IS NULL THEN
        call msgE('El registro SIIF no puede ser nulo.');
        LEAVE proc_docente;
    ELSEIF nombre IS NULL THEN
        call msgE('El nombre no puede ser nulo.');
        LEAVE proc_docente;
    ELSEIF apellido IS NULL THEN
        call msgE('El apellido no puede ser nulo.');
        LEAVE proc_docente;
    ELSEIF fecha_nac IS NULL THEN
        call msgE('La fecha de nacimiento no puede ser nula.');
        LEAVE proc_docente;
    ELSEIF correo IS NULL THEN
        call msgE('El correo no puede ser nulo.');
        LEAVE proc_docente;
    ELSEIF telefono IS NULL THEN
        call msgE('El telefono no puede ser nulo.');
        LEAVE proc_docente;
    ELSEIF direccion IS NULL THEN
        call msgE('La direccion no puede ser nula.');
        LEAVE proc_docente;
    ELSEIF dpi IS NULL THEN
        call msgE('El dpi no puede ser nulo.');
        LEAVE proc_docente;
    END IF;

    IF correo REGEXP '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' THEN

        INSERT INTO BD1PY2.DOCENTE(siif, dpi, nombre, apellido, fecha_nac, correo, telefono, direccion, fecha) VALUES(siif, dpi, nombre, apellido, fecha_nac, correo, telefono, direccion, fecha);

        call msg('Docente registrado exitosamente.');

    ELSE
        call msgE('El correo no es valido.');
    END IF;
END$$

DELIMITER ;

-- REGISTRO DE CARRERAS
CALL crearCarrera('Ingenieria Civil');       -- 1  VALIDAR QUE LES QUEDE ESTE ID EN LA CARRERA CORRESPONDIENTE
CALL crearCarrera('Ingenieria Industrial');  -- 2  VALIDAR QUE LES QUEDE ESTE ID EN LA CARRERA CORRESPONDIENTE
CALL crearCarrera('Ingenieria Sistemas');    -- 3  VALIDAR QUE LES QUEDE ESTE ID EN LA CARRERA CORRESPONDIENTE
CALL crearCarrera('Ingenieria Electronica'); -- 4  VALIDAR QUE LES QUEDE ESTE ID EN LA CARRERA CORRESPONDIENTE
CALL crearCarrera('Ingenieria Mecanica');    -- 5  VALIDAR QUE LES QUEDE ESTE ID EN LA CARRERA CORRESPONDIENTE
CALL crearCarrera('Ingenieria Mecatronica'); -- 6  VALIDAR QUE LES QUEDE ESTE ID EN LA CARRERA CORRESPONDIENTE
CALL crearCarrera('Ingenieria Quimica');     -- 7  VALIDAR QUE LES QUEDE ESTE ID EN LA CARRERA CORRESPONDIENTE
CALL crearCarrera('Ingenieria Ambiental');   -- 8  VALIDAR QUE LES QUEDE ESTE ID EN LA CARRERA CORRESPONDIENTE
CALL crearCarrera('Ingenieria Materiales');  -- 9  VALIDAR QUE LES QUEDE ESTE ID EN LA CARRERA CORRESPONDIENTE
CALL crearCarrera('Ingenieria Textil');      -- 10 VALIDAR QUE LES QUEDE ESTE ID EN LA CARRERA CORRESPONDIENTE

INSERT INTO carrera (id_carrera,nombre) VALUES (0,'Area Comun');
UPDATE carrera SET id_carrera = 0 WHERE id_carrera = LAST_INSERT_ID();

-- REGISTRO DE DOCENTES
CALL registrarDocente('Docente1','Apellido1','30-10-1999','aadf@ingenieria.usac.edu.gt',12345678,'direccion',12345678910,1);
CALL registrarDocente('Docente2','Apellido2','20-11-1999','docente2@ingenieria.usac.edu.gt',12345678,'direcciondocente2',12345678911,2);
CALL registrarDocente('Docente3','Apellido3','20-12-1980','docente3@ingenieria.usac.edu.gt',12345678,'direcciondocente3',12345678912,3);
CALL registrarDocente('Docente4','Apellido4','20-11-1981','docente4@ingenieria.usac.edu.gt',12345678,'direcciondocente4',12345678913,4);
CALL registrarDocente('Docente5','Apellido5','20-09-1982','docente5@ingenieria.usac.edu.gt',12345678,'direcciondocente5',12345678914,5);

-- REGISTRO DE ESTUDIANTES
-- SISTEMAS
CALL registrarEstudiante(202000001,'Estudiante de','Sistemas Uno','30-10-1999','sistemasuno@gmail.com',12345678,'direccion estudiantes sistemas 1',337859510101,3);
CALL registrarEstudiante(202000002,'Estudiante de','Sistemas Dos','3-5-2000','sistemasdos@gmail.com',12345678,'direccion estudiantes sistemas 2',32781580101,3);
CALL registrarEstudiante(202000003,'Estudiante de','Sistemas Tres','3-5-2002','sistemastres@gmail.com',12345678,'direccion estudiantes sistemas 3',32791580101,3);
-- CIVIL
CALL registrarEstudiante(202100001,'Estudiante de','Civil Uno','3-5-1990','civiluno@gmail.com',12345678,'direccion de estudiante civil 1',3182781580101,1);
CALL registrarEstudiante(202100002,'Estudiante de','Civil Dos','03-08-1998','civildos@gmail.com',12345678,'direccion de estudiante civil 2',3181781580101,1);
-- INDUSTRIAL
CALL registrarEstudiante(202200001,'Estudiante de','Industrial Uno','30-10-1999','industrialuno@gmail.com',12345678,'direccion de estudiante industrial 1',3878168901,2);
CALL registrarEstudiante(202200002,'Estudiante de','Industrial Dos','20-10-1994','industrialdos@gmail.com',89765432,'direccion de estudiante industrial 2',29781580101,2);
-- ELECTRONICA
CALL registrarEstudiante(202300001, 'Estudiante de','Electronica Uno','20-10-2005','electronicauno@gmail.com',89765432,'direccion de estudiante electronica 1',29761580101,4);
CALL registrarEstudiante(202300002, 'Estudiante de','Electronica Dos', '01-01-2008','electronicados@gmail.com',12345678,'direccion de estudiante electronica 2',387916890101,4);
-- ESTUDIANTES RANDOM
CALL registrarEstudiante(201710160, 'ESTUDIANTE','SISTEMAS RANDOM','20-08-1994','estudiasist@gmail.com',89765432,'direccionestudisist random',29791580101,3);
CALL registrarEstudiante(201710161, 'ESTUDIANTE','CIVIL RANDOM','20-08-1995','estudiacivl@gmail.com',89765432,'direccionestudicivl random',30791580101,1);

-- AGREGAR CURSO

-- AREA COMUN
CALL crearCurso(0006,'Idioma Tecnico 1',0,7,0,false); 
CALL crearCurso(0007,'Idioma Tecnico 2',0,7,0,false);
CALL crearCurso(101,'MB 1',0,7,0,true); 
CALL crearCurso(103,'MB 2',0,7,0,true); 
CALL crearCurso(017,'SOCIAL HUMANISTICA 1',0,4,0,true); 
CALL crearCurso(019,'SOCIAL HUMANISTICA 2',0,4,0,true); 
CALL crearCurso(348,'QUIMICA GENERAL',0,3,0,true); 
CALL crearCurso(349,'QUIMICA GENERAL LABORATORIO',0,1,0,true);
-- INGENIERIA EN SISTEMAS
CALL crearCurso(777,'Compiladores 1',80,4,3,true); 
CALL crearCurso(770,'INTR. A la Programacion y computacion 1',0,4,3,true); 
CALL crearCurso(960,'MATE COMPUTO 1',33,5,3,true); 
CALL crearCurso(795,'lOGICA DE SISTEMAS',33,2,3,true);
CALL crearCurso(796,'LENGUAJES FORMALES Y DE PROGRAMACIÓN',0,3,3,TRUE);
-- INGENIERIA INDUSTRIAL
CALL crearCurso(123,'Curso Industrial 1',0,4,2,true); 
CALL crearCurso(124,'Curso Industrial 2',0,4,2,true);
CALL crearCurso(125,'Curso Industrial enseñar a pensar',10,2,2,false);
CALL crearCurso(126,'Curso Industrial ENSEÑAR A DIBUJAR',2,4,2,true);
CALL crearCurso(127,'Curso Industrial 3',8,4,2,true);
-- INGENIERIA CIVIL
CALL crearCurso(321,'Curso Civil 1',0,4,1,true);
CALL crearCurso(322,'Curso Civil 2',4,4,1,true);
CALL crearCurso(323,'Curso Civil 3',8,4,1,true);
CALL crearCurso(324,'Curso Civil 4',12,4,1,true);
CALL crearCurso(325,'Curso Civil 5',16,4,1,false);
CALL crearCurso(0250,'Mecanica de Fluidos',0,5,1,true);
-- INGENIERIA ELECTRONICA
CALL crearCurso(421,'Curso Electronica 1',0,4,4,true);
CALL crearCurso(422,'Curso Electronica 2',4,4,4,true);
CALL crearCurso(423,'Curso Electronica 3',8,4,4,false);
CALL crearCurso(424,'Curso Electronica 4',12,4,4,true);
CALL crearCurso(425,'Curso Electronica 5',16,4,4,true);